.col-md-12
  .grid.simple
    .grid-title.no-border
      %h4
        %span.semi-bold Posts
      .tools
        %a.collapse{:href => "javascript:;"}
    .grid-body.no-border{:style => "display: block;"}
      .row
        =render partial: "posts/posts_list", :object => team_posts
      .row
        .col-md-6
          = simple_form_for(Post.new, :as => :post, :html => { :method => :post }) do |f|
            = f.hidden_field :team_id, :value => params[:id]
            = f.input :subject, :required => true,:id => "post_subject", :hint => 'Subject', :autofocus => true
            = f.input :message,:id => "post_message", :hint => 'Message'
            .form-actions
              .pull-right
                %button.btn.btn-success.btn-cons{:type => "submit"}
                  %i.icon-ok
                  Post
        .col-md-6
          %form.dropzone.no-margin{:action => "/file-upload", :id => "post-dropzone", :style => "min-height:100;"}
            .fallback
              %input{:multiple => "", :name => "file", :type => "file"}/

%script{:src => "/assets/plugins/dropzone/dropzone.min.js", :type => "text/javascript"}

:javascript
  Dropzone.options.postDropzone = {
    url: "#{posts_path}",
    paramName: "post[documents]", // The name that will be used to transfer the file
    autoProcessQueue: false,
    parallelUploads:10,
    maxFiles: 10,
    uploadMultiple:true,
    init: function() {
  
      var submitButton = $("#new_post button").get(0)
      myDropzone = this; // closure

      submitButton.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        if (myDropzone.getQueuedFiles().length > 0) {                        
            myDropzone.processQueue();  // Tell Dropzone to process all queued files.
        } else {                       
            myDropzone.uploadFiles([ ]); //send empty 
        }                                    
      });

      this.on("sendingmultiple", function(file, xhr, formData) {
        // Will send the filesize along with the file as POST data.
        formData.append("team_id", #{params[:id]});
        formData.append("post[subject]", $('#new_post input[name="post[subject]"]').val());
        formData.append("post[message]", $('#new_post textarea[name="post[message]"]').val());
        formData.append("authenticity_token", "#{ form_authenticity_token.to_s }" );
      });
  
      this.on("success", function(file, responseText) {
        // Handle the responseText here. For example, add the text to the preview element:
        // file.previewTemplate.appendChild(document.createTextNode(responseText));
        // myDropzone.removeAllFiles();
        // $('#new_post input[name="post[subject]"]').val("")
        // $('#new_post textarea[name="post[message]"]').val("")
        location.reload();
      });

      this.on("error", function(file, errorMessage) {
      });
    }
  };
